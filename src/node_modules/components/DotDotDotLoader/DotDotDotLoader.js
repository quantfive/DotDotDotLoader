/***
 * ... loader
 * @craiglu -- craig@quantfive.org
 */

import React from 'react';

export default class DotDotDotLoader extends React.Component {
  constructor(props) {
    super(props)

    this.state = {
      dotState: 0,
      dots: '.',
      show: false,
      amount: 3,
      repeat: true,
      interval: 500,
    }
  }
  componentDidMount() {
    if (this.props.repeat !== null) {
      this.setState({
        repeat: this.props.repeat,
      })
    }
    if (this.props.amount !== null) {
      this.setState({
        amount: this.props.amount,
      })
    }
    if (this.state.interval !== null) {
      this.setState({
        interval: this.props.interval,
      }) 
    }
    this.setState({
      show: this.props.show,
    });

    if (this.props.show) {
      this.dotsLoader();
    } else {
      clearTimeout(this.dotsLoaderTimeout)
      this.setState({
        dotState: 0,
        dots: '.',
      }) 
    }
  }
  componentWillReceiveProps(nextProps) {
    if (this.state.show !== nextProps.show) {
      this.setState({
        show: nextProps.show,
      })

      if (nextProps.show) {
        this.dotsLoader();
      } else {
        clearTimeout(this.dotsLoaderTimeout)
        this.setState({
          dotState: 0,
          dots: '.',
        }) 
      }
    }
    
    if(this.state.amount !== nextProps.amount) {
      this.setState({
        amount: nextProps.amount
      })
    }

    if(this.state.interval !== nextProps.interval) {
      this.setState({
        interval: nextProps.interval
      })
    }

    if(this.state.repeat !== nextProps.repeat) {
      this.setState({
        repeat: nextProps.repeat
      })
    }
  }

  componentWillUnmount() {
    clearTimeout(this.dotsLoaderTimeout)
  }

  /***
  * recursive function with timeout that loads in the next set of dots
  */
  dotsLoader = () => {
    clearTimeout(this.dotsLoaderTimeout)
    var nextAmount = this.state.dotState + 1;

    if (this.state.repeat) {
      nextAmount = (this.state.dotState + 1) % this.state.amount;
    }
    var nextDots;
    if (nextAmount === 0) {
      nextDots = '.'
    } else {
      nextDots = this.state.dots + '.';
    }
    this.setState({
      dotState: nextAmount, 
      dots: nextDots,
    })
    this.dotsLoaderTimeout = setTimeout(() => {
      this.dotsLoader()
    }, this.state.interval)
  }

  render() {
    return (
      <span className='dotDotDotLoader'>
        {this.state.show
          ? this.state.dots
          : null
        }
      </span>
    )
  }
}